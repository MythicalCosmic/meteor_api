# Generated by Django 5.2.7 on 2025-10-19 08:00

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Advertisement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('type', models.TextField()),
                ('content_url', models.FileField(upload_to='ads/content/')),
                ('html_code', models.TextField()),
                ('duration_seconds', models.IntegerField()),
                ('click_url', models.URLField()),
                ('position', models.TextField()),
                ('is_active', models.BooleanField(default=False)),
                ('priority', models.IntegerField()),
                ('total_impressions', models.IntegerField()),
                ('total_clicks', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Anime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('slug', models.SlugField(unique=True)),
                ('english_title', models.TextField()),
                ('uzbek_title', models.TextField()),
                ('description', models.TextField()),
                ('type', models.TextField()),
                ('status', models.TextField()),
                ('total_episodes', models.IntegerField()),
                ('duration_minutes', models.IntegerField()),
                ('release_year', models.IntegerField()),
                ('season', models.TextField()),
                ('poster_url', models.FileField(upload_to='anime/posters/')),
                ('banner_url', models.FileField(upload_to='anime/banners/')),
                ('trailer_url', models.FileField(upload_to='anime/trailers/')),
                ('rating', models.FloatField()),
                ('total_views', models.IntegerField()),
                ('total_likes', models.IntegerField()),
                ('is_premium_only', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=False)),
                ('published_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'indexes': [models.Index(fields=['title', 'english_title', 'uzbek_title', 'type', 'status', 'release_year', 'is_premium_only', 'created_at', 'updated_at'], name='anime_name_idx')],
                'constraints': [models.UniqueConstraint(fields=('slug',), name='anime_slug_unique')],
            },
        ),
        migrations.CreateModel(
            name='AnonymousSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_token', models.TextField()),
                ('fingerprint_hash', models.TextField()),
                ('ip_address', models.TextField()),
                ('country', models.TextField(default='UZ')),
                ('city', models.TextField()),
                ('first_seen_at', models.DateTimeField()),
                ('last_seen_at', models.DateTimeField()),
                ('total_visits', models.IntegerField()),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('session_token',), name='anonymoussession_session_token_unique')],
            },
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('episode_number', models.IntegerField()),
                ('title', models.TextField()),
                ('slug', models.TextField()),
                ('description', models.TextField()),
                ('thumbnail_url', models.FileField(upload_to='episodes/thumbnails/')),
                ('duration_seconds', models.BigIntegerField()),
                ('air_date', models.DateTimeField()),
                ('is_premium_only', models.BooleanField(default=False)),
                ('total_views', models.IntegerField()),
                ('is_published', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('anime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.anime')),
            ],
        ),
        migrations.CreateModel(
            name='EpisodeLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.TextField(default='uzbek')),
                ('video_url', models.FileField(upload_to='episodes/videos/')),
                ('video_quality', models.TextField()),
                ('file_size_mb', models.TextField()),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('episode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.episode')),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('slug', models.TextField()),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('name',), name='genre_name_unique'), models.UniqueConstraint(fields=('slug',), name='genre_slug_unique')],
            },
        ),
        migrations.CreateModel(
            name='AnimeGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.anime')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.genre')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.TextField()),
                ('password', models.TextField()),
                ('full_name', models.TextField()),
                ('avatar', models.FileField(upload_to='avatars/')),
                ('is_premium', models.BooleanField(default=False)),
                ('premium_expires_at', models.DateTimeField()),
                ('role', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_login_at', models.DateTimeField()),
            ],
            options={
                'indexes': [models.Index(fields=['email'], name='user_email_index'), models.Index(fields=['full_name'], name='user_full_name_index'), models.Index(fields=['is_premium'], name='user_is_premium_index')],
                'constraints': [models.UniqueConstraint(fields=('email',), name='user_email_unique')],
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_type', models.TextField()),
                ('price', models.FloatField()),
                ('currency', models.TextField()),
                ('status', models.TextField()),
                ('starts_at', models.DateTimeField()),
                ('expires_at', models.DateTimeField()),
                ('auto_renew', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.user')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_gateway', models.TextField()),
                ('transaction_id', models.IntegerField()),
                ('amount', models.FloatField()),
                ('currency', models.TextField(default='UZS')),
                ('status', models.TextField()),
                ('payment_method', models.TextField()),
                ('paid_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.subscription')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.user')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_like', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('anime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.anime')),
                ('anonymous_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.anonymoussession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.user')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent_id', models.IntegerField()),
                ('comment', models.TextField()),
                ('guest_name', models.TextField()),
                ('is_approved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('anime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.anime')),
                ('anonymous_session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='user_side.anonymoussession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.user')),
            ],
        ),
        migrations.CreateModel(
            name='AnimeView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_at', models.DateTimeField()),
                ('ip_address', models.TextField()),
                ('country', models.TextField(default='UZ')),
                ('anime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.anime')),
                ('anonymous_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.anonymoussession')),
                ('episode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.episode')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.user')),
            ],
        ),
        migrations.CreateModel(
            name='AdImpression',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clicked', models.BooleanField(default=False)),
                ('viewed_at', models.DateTimeField()),
                ('ip_address', models.TextField()),
                ('ad', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.advertisement')),
                ('anime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.anime')),
                ('anonymous_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.anonymoussession')),
                ('episode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.episode')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.user')),
            ],
        ),
        migrations.CreateModel(
            name='WatchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('watch_duration_seconds', models.IntegerField()),
                ('completed', models.BooleanField(default=False)),
                ('watched_at', models.DateTimeField()),
                ('ip_address', models.TextField()),
                ('device_type', models.TextField()),
                ('anime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.anime')),
                ('anonymous_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.anonymoussession')),
                ('episode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.episode')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_side.user')),
            ],
        ),
        migrations.AddConstraint(
            model_name='episode',
            constraint=models.UniqueConstraint(fields=('anime', 'episode_number'), name='episode_number_unique_per_anime'),
        ),
    ]
